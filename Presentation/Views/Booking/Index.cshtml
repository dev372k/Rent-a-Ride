@using Data.Commons
@using System.ComponentModel.DataAnnotations
@model Business.DTOs.CreateBookingDTO

@{
    ViewData["Title"] = "Create Booking";
    var vehicle = ViewBag.Vehicle as Business.DTOs.GetVehicleDTO;
    var vehicleId = Context.Request.Query["vehicleId"];
}
<div class=" mx-auto col-md-8 mt-5">
    <div class="text-center my-2">
        <h4>Booking Information</h4>
    </div>
    @*     <div>
    @{
    var success = TempData["Success"] as bool?;
    var error = TempData["Error"] as bool?;
    if (success.HasValue && success.Value)
    {
    <div class="alert alert-success" role="alert">
    Your booking created successfully!
    </div>
    }
    else if (error.HasValue && error.Value)
    {
    <div class="alert alert-danger" role="alert">
    There is an error processing your payment
    </div>
    }
    }
    </div> *@
    <div class="row">
        <div class="col-md-4">
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Vehicle Information</h5>
                    <img src="@vehicle.Image" style="width: 100%; height: 50px; object-fit: contain" />
                    <p>
                        <strong>Name:</strong> @vehicle.Model @vehicle.Name<br />
                        <strong>Year:</strong> @vehicle.Year<br />
                        <strong>Color:</strong> @vehicle.Color<br />
                        <strong>Price:</strong> &pound;@vehicle.Price/Day
                        @* <br />
                        <strong>Not available from:</strong>
                        <br />
                        @vehicle.NotAvailableFrom
                        <br />
                        <strong>Not available to:</strong>
                        <br />
                        @vehicle.NotAvailableTo *@
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <form asp-action="Index">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input asp-for="Price" value="@vehicle.Price" hidden />
                <input asp-for="VehicleId" value="@vehicleId" hidden />
                <input asp-for="UserId" value="0" hidden />
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="From" class="control-label"></label>
                            <input type="datetime-local" asp-for="From" class="form-control" onchange="disableDate()"/>
                            <span asp-validation-for="From" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="To" class="control-label"></label>
                            <input type="datetime-local" asp-for="To" class="form-control" />
                            <span asp-validation-for="To" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="form-group my-3">
                    <label asp-for="Purpose" class="control-label"></label>
                    <select name="Purpose" class="form-control">
                        <option value="">Select Reason</option>
                        @foreach (var value in Enum.GetValues(typeof(enRentReason)))
                        {
                            var name = Enum.GetName(typeof(enRentReason), value);
                            <option value="@value.ToString().Replace("_", " ")">@value.ToString().Replace("_", " ")</option>
                        }
                    </select>
                    @* <textarea asp-for="Purpose" class="form-control"></textarea> *@
                    <span asp-validation-for="Purpose" class="text-danger"></span>
                </div>
                <div class="d-grid my-2">
                    <input type="submit" value="Checkout" class="btn btn-outline-success" />
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var vehicleData = @Html.Raw(Json.Serialize(vehicle));
            // var notAvailableFrom = new Date("@vehicle.NotAvailableFrom").toISOString().slice(0, 16);
            // var notAvailableTo = new Date("@vehicle.NotAvailableTo").toISOString().slice(0, 16);
            var notAvailableFrom = new Date(vehicleData.notAvailableFrom).toISOString().slice(0, 16);
            var notAvailableTo = new Date(vehicleData.notAvailableTo).toISOString().slice(0, 16);
            var now = new Date().toISOString().slice(0, 16);
            //We need to disale date from and To both on the base of Dates coming.
            document.getElementById("From").min = notAvailableFrom > now ? notAvailableFrom : now;
            document.getElementById("From").min = notAvailableTo > now ? notAvailableTo : now;
            document.getElementById("To").min = notAvailableFrom > now ? notAvailableFrom : now;
            document.getElementById("To").min = notAvailableTo > now ? notAvailableTo : now;
        });

        const disableDate = () => {
            var now = new Date().toISOString().slice(0, 16);
            var notAvailableToDate = new Date($("#From").val());
            notAvailableToDate.setDate(notAvailableToDate.getDate() + 1);
            var notAvailableTo = notAvailableToDate.toISOString().slice(0, 16);
            console.log("Test", now, notAvailableTo)
            document.getElementById("To").min = notAvailableTo > now ? notAvailableTo : now;
        }
    </script>
}
